# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-TODAY Odoo S.A. <http://www.odoo.com>
#    @author Paramjit Singh A. Sahota <sahotaparamjitsingh@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from odoo import models, fields, api
# from odoo.tools.xml_utils import _check_with_xsd
# import base64
# from io import BytesIO


class AccountMove(models.Model):
    _inherit = 'account.move'

    @api.depends('partner_id')
    def _compute_sign_required(self):
        """Assign the "Sign CFDI?" value how in the partner"""
        out_invoice = self.filtered(lambda i: i.move_type == 'out_invoice')
        for record in out_invoice:
            record.l10n_mx_edi_sign_required = record.partner_id.commercial_partner_id.l10n_mx_edi_sign_required
            record.l10n_mx_edi_payment_sign_required = record.partner_id.commercial_partner_id.l10n_mx_edi_sign_required

        for record in self - out_invoice:
            record.l10n_mx_edi_sign_required = True
            record.l10n_mx_edi_payment_sign_required = True

    def _inverse_sign_required(self):
        return False

    l10n_mx_edi_sign_required = fields.Boolean(
        string='Sign CFDI?',
        compute='_compute_sign_required',
        default=True,
        store=True,
        inverse='_inverse_sign_required',
        states={'draft': [('readonly', False)]},
        help='If this field is active, the CFDI will be generated for this invoice.')

    l10n_mx_edi_payment_sign_required = fields.Boolean(
        string='Sign CFDI Payment?',
        compute='_compute_sign_required',
        default=True,
        store=True,
        inverse='_inverse_sign_required',
        states={'draft': [('readonly', False)]},
        help='If this field is active, the CFDI payment will be generated for this invoice payments.')

    l10n_mx_edi_external_reference = fields.Char(
        string='External Reference',
        help='External Invoice Reference comes normally in the PDF, it was generated by the External Partner who '
        'signed the invoice.', copy=False)

    l10n_mx_edi_xml_file_require = fields.Boolean(
        string='Is xml file required?',
        store=True,
        related='company_id.l10n_mx_edi_xml_file_require',
        help='Check if the xml file is going to be required or not, in not '
        'signed invoices.')

    def post(self):
        # # Generates the CFDI attachments for mexican companies when validated.
        # version = self.l10n_mx_edi_get_pac_version().replace('.', '-')
        # trans_field = 'transaction_ids' in self._fields
        """for move in self:
            if move.move_type in ('out_invoice', 'out_refund') and move.l10n_mx_edi_sign_required is False:
                domain = [
                    ('res_id', '=', self.id),
                    ('res_model', '=', self._name),
                    ('name', '=like', '%.xml')]
                xml_file = self.env['ir.attachment'].search(domain, limit=1)
                l10n_mx_edi_xml_file_require = move.company_id.l10n_mx_edi_xml_file_require
                if l10n_mx_edi_xml_file_require is True and not xml_file:
                    raise UserError(_("Please, before post this invoice, attach the xml signed file"))
                else:
                    if l10n_mx_edi_xml_file_require is True:
                        # Verificar si el archivo adjuntado es un CFDI 3.3 válido
                        attachment = self.env.ref('l10n_mx_edi.xsd_cached_cfdv33_xsd', False)
                        xsd_datas = base64.b64decode(attachment.datas) if attachment else b''

                        cfdi = base64.decodestring(xml_file.datas).replace(
                            b'xmlns:schemaLocation', b'xsi:schemaLocation')
                        try:
                            tree = self.l10n_mx_edi_get_xml_etree(cfdi)
                        except Exception as e:
                            raise UserError(_("The xml file: \"%s\" is not a valid CFDI file.") % (xml_file.name))

                        # TODO Parece que FIXED: Al validar marca error en los complementos:
                        if xsd_datas:
                            try:
                                with BytesIO(xsd_datas) as xsd:
                                    _check_with_xsd(tree, xsd)
                            except (IOError, ValueError):
                                raise UserError(_("The xsd file to validate the XML structure was not found"))
                            except Exception as e:
                                # raise UserError("The CFDI uploaded is not valid")
                                raise UserError(_('The CFDI generated is not valid.\n') + str(e))
                        else:
                            raise UserError(_("The xsd file to validate the XML structure was not found"))

                        # Validar el RFC del Emisor
                        company_vat = self.env.user.company_id.vat
                        rfc_supplier = tree.Emisor.get('Rfc', tree.Emisor.get('Rfc'))
                        if rfc_supplier != company_vat:
                            raise UserError(_('Sender VAT of the XML file does not coincide with the VAT of your company!'))

                        # Validar el RFC del Receptor
                        rfc_customer = tree.Receptor.get('Rfc', tree.Receptor.get('Rfc'))
                        customer_vat = self.partner_id.vat
                        if rfc_customer != customer_vat:
                            raise UserError(_('Receiver VAT of the XML file does not coincide with the VAT of this customer!'))

                        # Validar la Moneda
                        xml_moneda = tree.get('Moneda', tree.get('Moneda')) or ''
                        invoice_currency = self.currency_id.name
                        if xml_moneda != invoice_currency:
                            raise UserError(_('The currency of the XML file does not coincide with the curency of this Invoice!'))

                        # Validar el monto Total
                        xml_total = tree.get('Total', tree.get('Total')) or ''
                        invoice_total = self.amount_total
                        # TODO: Mostrar Warning pero no Error
                        # if xml_total != str(invoice_total):
                        #    raise UserError(_('The total amount of the XML file does not coincide with the total amount of this Invoice!'))

                        move.l10n_mx_edi_cfdi_name = xml_file.name
                        move.name = move.l10n_mx_edi_external_reference"""

        result = super(AccountMove, self).post()
        return result

        # TODO: Hacer un wizard que inserte un registro en e campo account_move.edi_document_ids con los siguientes valores:
        # Saber si este wizard es antes de Publicar o después
        # xml_invoice = self.env['ir.attachment'].create({
        #     'name': invoice_upload_id.xml_file_name,
        #     'type': 'binary',
        #     'datas': invoice_upload_id.xml_binary_content,
        #     'store_fname': invoice_upload_id.xml_file_name,
        #     'res_model': 'account.move',
        #     'res_id': new_invoice.id,
        #     'mimetype': 'application/xml'
        # })
        # cfdi_3_3_edi = self.env.ref('l10n_mx_edi.edi_cfdi_3_3')
        # arr_edi_document_id = {
        #     'edi_format_id': cfdi_3_3_edi.id,
        #     'attachment_id': xml_invoice.id,
        #     'state': 'sent',
        #     }
        # arr_edi_document_ids = [(0, 0, arr_edi_document_id)]
